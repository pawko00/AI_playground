# -*- coding: utf-8 -*-
"""Sztuczna_lab2_zadanie2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bniIwZO2Hz2WGwFaiTq-I17ysBIG-8bW
"""

import pandas as pd

data = pd.read_csv('breast-cancer.csv')

data = data.drop('id', axis=1)
data_numeric = data.drop('diagnosis', axis=1)
data_categorical = data['diagnosis']

data_categorical.isnull().sum()
data_numeric.isnull().sum()

from sklearn.preprocessing import LabelEncoder
data_categorical = pd.DataFrame(data_categorical)

label_encoder = LabelEncoder()
data_categorical = data_categorical.apply(label_encoder.fit_transform)

data_final = pd.concat([data_numeric, data_categorical], axis=1)
data_final.head()

x = data_final.drop('diagnosis', axis=1)
y = data_final['diagnosis']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#import LR, KNN,NB,LSVM,NLSVM,DT,RF
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier


LR = LogisticRegression(solver = "lbfgs", max_iter=1000)
KNN = KNeighborsClassifier()
NB = GaussianNB()
LSVM = LinearSVC(dual = False, max_iter=10000)
NLSVM = SVC(kernel = "rbf")
DT = DecisionTreeClassifier()
RF = RandomForestClassifier()

#fit to all models

LR_fit = LR.fit(x_train, y_train)
KNN_fit = KNN.fit(x_train, y_train)
NB_fit = NB.fit(x_train, y_train)
LSVM_fit = LSVM.fit(x_train, y_train)
NLSVM_fit = NLSVM.fit(x_train, y_train)
DT_fit = DT.fit(x_train, y_train)
RF_fit = RF.fit(x_train, y_train)

LR_pred = LR.predict(x_test)
KNN_pred = KNN.predict(x_test)
NB_pred = NB.predict(x_test)
LSVM_pred = LSVM.predict(x_test)
NLSVM_pred = NLSVM.predict(x_test)
DT_pred = DT.predict(x_test)
RF_pred = RF.predict(x_test)

from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay

accuracy_LR = accuracy_score(y_test, LR_pred)
precision_LR = precision_score(y_test, LR_pred)
recall_LR = recall_score(y_test, LR_pred)
f1_LR = f1_score(y_test, LR_pred)

print("Accuracy of Logistic Regression", accuracy_LR)
print("Precision of Logistic Regression", precision_LR)
print("Recall of Logistic Regression", recall_LR)
print("F1 Score of Logistic Regression", f1_LR)

accuracy_KNN = accuracy_score(y_test, KNN_pred)
precision_KNN = precision_score(y_test, KNN_pred)
recall_KNN = recall_score(y_test, KNN_pred)
f1_KNN = f1_score(y_test, KNN_pred)

print("Accuracy of KNN", accuracy_KNN)
print("Precision of KNN", precision_KNN)
print("Recall of KNN", recall_KNN)
print("F1 Score of KNN", f1_KNN)

accuracy_NB = accuracy_score(y_test, NB_pred)
precision_NB = precision_score(y_test, NB_pred)
recall_NB = recall_score(y_test, NB_pred)
f1_NB = f1_score(y_test, NB_pred)

print("Accuracy of Naive Bayes", accuracy_NB)
print("Precision of Naive Bayes", precision_NB)
print("Recall of Naive Bayes", recall_NB)
print("F1 Score of Naive Bayes", f1_NB)

accuracy_LSVM = accuracy_score(y_test, LSVM_pred)
precision_LSVM = precision_score(y_test, LSVM_pred)
recall_LSVM = recall_score(y_test, LSVM_pred)
f1_LSVM = f1_score(y_test, LSVM_pred)

print("Accuracy of Linear SVM", accuracy_LSVM)
print("Precision of Linear SVM", precision_LSVM)
print("Recall of Linear SVM", recall_LSVM)
print("F1 Score of Linear SVM", f1_LSVM)

accuracy_NLSVM = accuracy_score(y_test, NLSVM_pred)
precision_NLSVM = precision_score(y_test, NLSVM_pred)
recall_NLSVM = recall_score(y_test, NLSVM_pred)
f1_NLSVM = f1_score(y_test, NLSVM_pred)

print("Accuracy of Non-Linear SVM", accuracy_NLSVM)
print("Precision of Non-Linear SVM", precision_NLSVM)
print("Recall of Non-Linear SVM", recall_NLSVM)
print("F1 Score of Non-Linear SVM", f1_NLSVM)

accuracy_DT = accuracy_score(y_test, DT_pred)
precision_DT = precision_score(y_test, DT_pred)
recall_DT = recall_score(y_test, DT_pred)
f1_DT = f1_score(y_test, DT_pred)

print("Accuracy of Decision Tree", accuracy_DT)
print("Precision of Decision Tree", precision_DT)
print("Recall of Decision Tree", recall_DT)
print("F1 Score of Decision Tree", f1_DT)

accuracy_RF = accuracy_score(y_test, RF_pred)
precision_RF = precision_score(y_test, RF_pred)
recall_RF = recall_score(y_test, RF_pred)
f1_RF = f1_score(y_test, RF_pred)

print("Accuracy() of Random Forest", accuracy_RF)
print("Precision of Random Forest", precision_RF)
print("Recall of Random Forest", recall_RF)
print("F1 Score of Random Forest", f1_RF)