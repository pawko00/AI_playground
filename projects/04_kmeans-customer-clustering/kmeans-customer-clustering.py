# -*- coding: utf-8 -*-
"""Sztuczna_lab2_zadanie4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ml2KoQ2XFe6BPJX7d3RjZyZd_cCFDcd
"""

import pandas as pd
from sklearn.preprocessing import OneHotEncoder

data_original = pd.read_csv('Mall_Customers.csv')
print(data_original.head())
data_original.drop('CustomerID', axis=1, inplace=True)
print("data.isnull(): \n", data_original.isnull().sum())
print("data.isna(): \n",data_original.isna().sum())
print("\ntypy danych: \n", data_original.dtypes)

categorical_columns = data_original.select_dtypes(include=['object']).columns.tolist()
one_hot_encoder = OneHotEncoder(sparse_output=False)
encoded_data = one_hot_encoder.fit_transform(data_original[categorical_columns])
encoded_df = pd.DataFrame(encoded_data, columns=one_hot_encoder.get_feature_names_out(categorical_columns))

data = pd.concat([data_original.drop(categorical_columns, axis=1), encoded_df], axis=1)
print(data.head())

x = data.iloc[:,[0,2]]
print(x)

from sklearn.cluster import KMeans
wcss = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)

from matplotlib import pyplot as plt
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)
y_kmeans = kmeans.fit_predict(x)
#jak działa adresowanie do rysowania wykresów?
#x[y_kmeans == 0, 0], pierwsza wspolrzedna zwraca nam maske logiczna z y_kmeans, gdzie są ==0
#a to z kolei oznacza, ze dostaniemy tylko te wiersze, ktore zostaly zaklasyfikowane do klastra 0
#x.columns[0], zwraca nam wartosci danej cechy, czyli tutaj age
#dla argumentu dla y robimy to samo, ale dla argumentu spending score
plt.scatter(x.loc[y_kmeans == 0, x.columns[0]], x.loc[y_kmeans == 0, x.columns[1]], s=100, c='red', label='Cluster 1')
plt.scatter(x.loc[y_kmeans == 1, x.columns[0]], x.loc[y_kmeans == 1, x.columns[1]], s=100, c='blue', label='Cluster 2')
plt.scatter(x.loc[y_kmeans == 2, x.columns[0]], x.loc[y_kmeans == 2, x.columns[1]], s=100, c='green', label='Cluster 3')
plt.scatter(x.loc[y_kmeans == 3, x.columns[0]], x.loc[y_kmeans == 3, x.columns[1]], s=100, c='cyan', label='Cluster 4')

plt.xlabel(x.columns[0])
plt.ylabel(x.columns[1])
plt.title('Clusters of customers')
plt.legend()
plt.show()

