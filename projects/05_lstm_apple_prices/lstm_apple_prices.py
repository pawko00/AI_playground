# -*- coding: utf-8 -*-
"""Lab6_Pawkuix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tt0to9yRopbzLUdNZz4f6jjGG2-rlvnz
"""

import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from keras.src.layers import LSTM, Dropout, Dense
from keras import Sequential
from keras.src.callbacks import EarlyStopping

aapl_data = yf.download('AAPL', start='2020-01-01', end='2024-01-01')
aapl_data.head()

print(aapl_data.isnull().sum())
aapl_data.ffill(inplace=True)

scaler = MinMaxScaler(feature_range=(0, 1))
aapl_data_scaled = scaler.fit_transform(aapl_data['Close'].values.reshape(-1, 1))
aapl_data_scaled

X = []
y = []
for i in range(60, len(aapl_data_scaled)):
  X.append(aapl_data_scaled[i - 60 : i, 0])
  y.append(aapl_data_scaled[i, 0])
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

model = Sequential()
model.add(LSTM(150, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2)) gu
model.add(LSTM(150, return_sequences=True))
model.add(LSTM(150, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(150))
model.add(Dropout(0.2))
model.add(Dense(1))nia
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

monitor = EarlyStopping(monitor='val_loss', min_delta=1e-3, patience=30, verbose=1, mode='auto', restore_best_weights=True)
history = model.fit(X_train, y_train, validation_split=0.2, callbacks= [monitor], verbose=1, epochs=100)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

X_test = np.array(X_test)
y_test = np.array(y_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

test_loss = model.evaluate(X_test, y_test)
print("Test Loss: ", test_loss)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred)
print("Mean Absolute Error: ", mae)
print("Root Mean Square Error: ", rmse)

import pandas as pd
import matplotlib.pyplot as plt
data = yf.download('AAPL', period='64d', interval='1d')
closing_prices = data['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(closing_prices)
predicted_prices = []
current_batch = scaled_data[-60:].reshape(1, 60, 1)
for i in range(4):
  next_prediction = model.predict(current_batch)
  next_prediction_reshaped = next_prediction.reshape(1, 1, 1)
  current_batch = np.append(current_batch[:, 1:, :], next_prediction_reshaped, axis=1)
  predicted_prices.append(scaler.inverse_transform(next_prediction)[0, 0])
last_date = data.index[-1]
next_day = last_date + pd.Timedelta(days=1)
prediction_dates = pd.date_range(start=next_day, periods=4)
predicted_data = pd.DataFrame(index=prediction_dates,
data=predicted_prices, columns=['Close'])
combined_data = pd.concat([data['Close'], predicted_data['Close']])
combined_data = combined_data[-64:]
plt.figure(figsize=(10, 6))
plt.plot(data.index[-60:], data['Close'][-60:], linestyle='-', marker='o', color='blue', label='Actual Data')
plt.plot(prediction_dates, predicted_prices, linestyle='-', marker='o', color='red', label='Predicted Data')
plt.title("AAPL Stock Price: Last 60 Days and Next 4 Days Predicted")
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split

from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense
from keras.callbacks import EarlyStopping

data = yf.download('AAPL', start='2020-01-01', end='2024-01-01')
data.ffill(inplace=True)
print(data.head())

scaler = MinMaxScaler(feature_range=(0, 1))
aapl_data_scaled = scaler.fit_transform(aapl_data['Open'].values.reshape(-1, 1))
aapl_data_scaled

sequence_length = 30
X = []
y = []

for i in range(sequence_length, len(aapl_data_scaled)):
    X.append(aapl_data_scaled[i-sequence_length:i, 0])
    y.append(aapl_data_scaled[i, 0])

X = np.array(X)
y = np.array(y)

print("Kształt X:", X.shape)
print("Kształt y:", y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test  = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

model = Sequential()
model.add(LSTM(150, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(150, return_sequences=True))
model.add(LSTM(150, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(150))
model.add(Dropout(0.2))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

monitor = EarlyStopping(monitor='val_loss', min_delta=1e-3, patience=30, verbose=1, mode='auto', restore_best_weights=True)
history = model.fit(X_train, y_train, validation_split=0.2, callbacks= [monitor], verbose=1, epochs=100)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

test_loss = model.evaluate(X_test, y_test)
print("Test Loss (MSE):", test_loss)

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred)
print("Mean Absolute Error (MAE):", mae)
print("Root Mean Square Error: ", rmse)

import pandas as pd
import matplotlib.pyplot as plt
data = yf.download('AAPL', period='64d', interval='1d')
closing_prices = data['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(closing_prices)
predicted_prices = []
current_batch = scaled_data[-60:].reshape(1, 60, 1)
for i in range(4):
  next_prediction = model.predict(current_batch)
  next_prediction_reshaped = next_prediction.reshape(1, 1, 1)
  current_batch = np.append(current_batch[:, 1:, :], next_prediction_reshaped, axis=1)
  predicted_prices.append(scaler.inverse_transform(next_prediction)[0, 0])
last_date = data.index[-1]
next_day = last_date + pd.Timedelta(days=1)
prediction_dates = pd.date_range(start=next_day, periods=4)
predicted_data = pd.DataFrame(index=prediction_dates,
data=predicted_prices, columns=['Close'])
combined_data = pd.concat([data['Close'], predicted_data['Close']])
combined_data = combined_data[-60:]
plt.figure(figsize=(10, 7))
plt.plot(data.index[-60:], data['Close'][-60:], linestyle='-', marker='o', color='blue', label='Actual Data')
plt.plot(prediction_dates, predicted_prices, linestyle='-', marker='o', color='red', label='Predicted Data')
plt.title("AAPL Stock Price: Last 60 Days and Next 4 Days Predicted")
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()