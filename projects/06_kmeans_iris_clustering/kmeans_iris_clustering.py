# -*- coding: utf-8 -*-
"""kmeans_iris_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arrwaN-ynkECfuts65agd5L2Q6b1qeGI
"""

import pandas as pd
from sklearn.preprocessing import OneHotEncoder

data = pd.read_csv('iris.csv')
print(data.head())
data.drop('Id', axis = 1, inplace=True )
print("data.isnull(): \n", data.isnull().sum())
print("data.isna(): \n",data.isna().sum())
print("\ntypy danych: \n", data.dtypes)

categorical_columns = data.select_dtypes(include=['object']).columns.tolist()

one_hot_encoder = OneHotEncoder(sparse_output=False)
encoded_data = one_hot_encoder.fit_transform(data[categorical_columns])
encoded_df = pd.DataFrame(encoded_data, columns=one_hot_encoder.get_feature_names_out(categorical_columns))

data = pd.concat([data.drop(categorical_columns, axis=1), encoded_df], axis=1)
print(data.head())

x1 = data.iloc[:,[2,3]]
x2 = data.iloc[:,[0,2]]
x3 = data.iloc[:,[1,3]]

from sklearn.cluster import KMeans

wcss1 = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(x1)
    wcss1.append(kmeans.inertia_)

wcss2 = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(x2)
    wcss2.append(kmeans.inertia_)

wcss3 = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(x3)
    wcss3.append(kmeans.inertia_)

from matplotlib import pyplot as plt

plt.plot(range(1, 11), wcss1, label='x1')
plt.plot(range(1, 11), wcss2, label='x2')
plt.plot(range(1, 11), wcss3, label='x3')
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.legend()
plt.show()

kmeans1 = KMeans(n_clusters=3, init='k-means++', random_state=42)
kmeans2 = KMeans(n_clusters=3, init='k-means++', random_state=42)
kmeans3 = KMeans(n_clusters=3, init='k-means++', random_state=42)

y1 = kmeans1.fit_predict(x1)
y2 = kmeans2.fit_predict(x2)
y3 = kmeans3.fit_predict(x3)

#right now i need 3 scatters that shows the results

plt.scatter(x1.loc[y1 == 0, x1.columns[0]], x1.loc[y1==0, x1.columns[1]], s = 100, c = "red")
plt.scatter(x1.loc[y1 == 1, x1.columns[0]], x1.loc[y1==1, x1.columns[1]], s = 100, c = "blue")
plt.scatter(x1.loc[y1 == 2, x1.columns[0]], x1.loc[y1==2, x1.columns[1]], s = 100, c = "green")

plt.xlabel(x1.columns[0])
plt.ylabel(x1.columns[1])
plt.title('Wykres punktowy')
plt.show()

plt.scatter(x2.loc[y2 == 0, x2.columns[0]], x2.loc[y2==0, x2.columns[1]], s = 100, c = "red")
plt.scatter(x2.loc[y2 == 1, x2.columns[0]], x2.loc[y2==1, x2.columns[1]], s = 100, c = "blue")
plt.scatter(x2.loc[y2 == 2, x2.columns[0]], x2.loc[y2==2, x2.columns[1]], s = 100, c = "green")

plt.xlabel(x2.columns[0])
plt.ylabel(x2.columns[1])
plt.title('Wykres punktowy')
plt.show()

plt.scatter(x3.loc[y3 == 0, x3.columns[0]], x3.loc[y3==0, x3.columns[1]], s = 100, c = "red")
plt.scatter(x3.loc[y3 == 1, x3.columns[0]], x3.loc[y3==1, x3.columns[1]], s = 100, c = "blue")
plt.scatter(x3.loc[y3 == 2, x3.columns[0]], x3.loc[y3==2, x3.columns[1]], s = 100, c = "green")

plt.xlabel(x3.columns[0])
plt.ylabel(x3.columns[1])
plt.title('Wykres punktowy')
plt.show()